@model Uco.Models.FormPage


@if (ViewData.TemplateInfo.TemplateDepth > 1)
{
    if (Model == null)
    {
        @ViewData.ModelMetadata.NullDisplayText
    }
    else
    {
        @ViewData.ModelMetadata.SimpleDisplayText
    }
}
else
{
    ViewData.Clear();
    <text>
        @(Html.Kendo().TabStrip()
    .Name("TabStrip")
    .Animation(false)
    .Items(tabstrip =>
    {
        foreach (var prop0 in ViewData.ModelMetadata.Properties.Where(pm => pm.ShowForEdit && !ViewData.TemplateInfo.Visited(pm) && pm.Watermark != null).OrderBy(r => r.Order).Select(r => r.Watermark).Distinct())
        {
            string Watermark = prop0;
            if (SF.UsePermissions() == false && !Uco.Infrastructure.Livecycle.LS.CurrentUser.IsInRole("Admin") && (Watermark == "Permissions" || Watermark == "הרשאות")) { continue; }

            if (Watermark == "Hidden") continue;
            tabstrip.Add().Text(Watermark).Content(@<text>
                @foreach (var prop in ViewData.ModelMetadata.Properties.Where(pm => pm.ShowForEdit && !ViewData.TemplateInfo.Visited(pm) && pm.Watermark == Watermark).OrderBy(r => r.Order))
                {
                    if (!prop.IsComplexType)
                    {
                        if (prop.HideSurroundingHtml)
                        {
                            @Html.Editor(prop.PropertyName)
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(Html.Label(prop.PropertyName).ToHtmlString()))
                            {
                                <div class="editor-label">@Html.Label(prop.PropertyName) @(prop.IsRequired ? "*" : "")</div>
                            }
                            <div class="editor-field">@Html.Editor(prop.PropertyName) @Html.ValidationMessage(prop.PropertyName)</div>
                        }
                    }
                    else
                    {
                        @Html.Editor(prop.PropertyName)
                    }
                }
            </text>);
        }
    }).SelectedIndex(0))
    </text>

    foreach (var prop in ViewData.ModelMetadata.Properties.Where(pm => pm.ShowForEdit && !ViewData.TemplateInfo.Visited(pm) && pm.Watermark == null).OrderBy(r => r.Order))
    {
        if (!prop.IsComplexType)
        {
            if (prop.HideSurroundingHtml)
            {
                @Html.Editor(prop.PropertyName)
            }
            else
            {
                if (!string.IsNullOrEmpty(Html.Label(prop.PropertyName).ToHtmlString()))
                {
                    <div class="editor-label">@Html.Label(prop.PropertyName) @(prop.IsRequired ? "*" : "")</div>
                }
                <div class="editor-field">@Html.Editor(prop.PropertyName) @Html.ValidationMessage(prop.PropertyName)</div>
            }
        }
    }
}

<br />
<h2>@Html.R("FormFields")</h2>

<div class="u-max-grid">
    @{
        Uco.Models.AbstractPage page = LS.CurrentEntityContext.AbstractPages.FirstOrDefault(r => r.ID == Model.ID);

        List<Uco.Models.FormField> FieldItems = new List<Uco.Models.FormField>();
        if (page != null) { FieldItems = page.GetDataFromXML1<Uco.Models.FormField>(); }

        @(Html.Kendo().Grid(FieldItems)
        .Name("Fields")
        .ToolBar(tools => tools.Create().Text("Add new field"))
        .Editable(editable => editable.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Bottom))
        .Columns(columns =>
        {
            columns.Bound(p => p.FormFieldOrder).ClientTemplate("#= FormFieldOrder #" +
            "<input type='hidden' name='Fields[#= index1(data)#].FormFieldOrder' value='#= FormFieldOrder #' />"
            );

            columns.Bound(p => p.FormFieldTitle).ClientTemplate("#= FormFieldTitle #" +
            "<input type='hidden' name='Fields[#= index1(data)#].FormFieldTitle' value='#= FormFieldTitle #' />"
            );

            columns.Bound(p => p.FormFieldRequired).ClientTemplate("#= FormFieldRequired #" +
                "<input type='hidden' name='Fields[#= index1(data)#].FormFieldRequired' value='#= FormFieldRequired #' />"
            );

            columns.Bound(p => p.FormFieldRequiredTitle).ClientTemplate("#= FormFieldRequiredTitle #" +
            "<input type='hidden' name='Fields[#= index1(data)#].FormFieldRequiredTitle' value='#= FormFieldRequiredTitle #' />"
            );

            columns.Bound(p => p.FormFieldType).ClientTemplate("#= FormFieldTypeText #" +
                "<input type='hidden' name='Fields[#= index1(data)#].FormFieldType' value='#= FormFieldType #' />"
              );

            columns.Bound(p => p.FormFieldID).Hidden().ClientTemplate("#= FormFieldID #" +
                "<input type='hidden' name='Fields[#= index1(data)#].FormFieldID' value='#= FormFieldID #' />"
              );

            columns.Command(command => command.Destroy()).Width(100);
        })
        .DataSource(dataSource => dataSource.Ajax()
            .Model(model =>
                {
                    model.Id(p => p.FormFieldID);
                    model.Field(p => p.FormFieldID).Editable(false);
                })
            .ServerOperation(false)
        )
        )
    }
</div>
<script>

    function index1(dataItem) {
        var data = $("#Fields").data("kendoGrid").dataSource.data();

        return data.indexOf(dataItem);
    }

</script>


<br />
<h2>@Html.R("FormRools")</h2>
<div class="u-max-grid">
    @{
        List<Uco.Models.FormRool> RoolItems = new List<Uco.Models.FormRool>();
        if (page != null) { RoolItems = page.GetDataFromXML2<Uco.Models.FormRool>(); }

        @(Html.Kendo().Grid(RoolItems)
        .Name("Rools")
        .ToolBar(tools => tools.Create().Text("Add new rool"))
        .Editable(editable => editable.Mode(GridEditMode.InCell).CreateAt(GridInsertRowPosition.Bottom))
        .Columns(columns =>
        {
            columns.Bound(p => p.FormRoolOrder).ClientTemplate("#= FormRoolOrder #" +
            "<input type='hidden' name='Rools[#= index2(data)#].FormRoolOrder' value='#= FormRoolOrder #' />"
            );

            columns.Bound(p => p.FormRoolTitle).ClientTemplate("#= FormRoolTitle #" +
            "<input type='hidden' name='Rools[#= index2(data)#].FormRoolTitle' value='#= FormRoolTitle #' />"
            );

            columns.Bound(p => p.FormRoolEmail).ClientTemplate("#= FormRoolEmail #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolEmail' value='#= FormRoolEmail #' />"
            );

            columns.Bound(p => p.FormRoolAnd).ClientTemplate("#= FormRoolAnd #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolAnd' value='#= FormRoolAnd #' />"
            );

            columns.Bound(p => p.FormRoolItem1).ClientTemplate("#= FormRoolItem1 #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolItem1' value='#= FormRoolItem1 #' />"
            );

            columns.Bound(p => p.FormRoolValue1).ClientTemplate("#= FormRoolValue1 #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolValue1' value='#= FormRoolValue1 #' />"
            );

            columns.Bound(p => p.FormRoolItem2).ClientTemplate("#= FormRoolItem2 #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolItem2' value='#= FormRoolItem2 #' />"
            );

            columns.Bound(p => p.FormRoolValue2).ClientTemplate("#= FormRoolValue2 #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolValue2' value='#= FormRoolValue2 #' />"
            );

            columns.Bound(p => p.FormRoolItem3).ClientTemplate("#= FormRoolItem3 #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolItem3' value='#= FormRoolItem3 #' />"
            );

            columns.Bound(p => p.FormRoolValue3).ClientTemplate("#= FormRoolValue3 #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolValue3' value='#= FormRoolValue3 #' />"
            );

            columns.Bound(p => p.FormRoolRole).ClientTemplate("#= FormRoolRole #" +
                "<input type='hidden' name='Rools[#= index2(data)#].FormRoolRole' value='#= FormRoolRole #' />"
            );

            columns.Bound(p => p.FormRoolID).Hidden().ClientTemplate("#= FormRoolID #" +
                "<input type='hidden' name='Fields[#= index1(data)#].FormRoolID' value='#= FormRoolID #' />"
              );

            columns.Command(command => command.Destroy()).Width(100);
        })
        .DataSource(dataSource => dataSource.Ajax()
            .Model(model =>
                {
                    model.Id(p => p.FormRoolID);
                    model.Field(p => p.FormRoolID).Editable(false);
                })
            .ServerOperation(false)
        )
        )
    }
</div>
<script>

    function index2(dataItem) {
        var data = $("#Rools").data("kendoGrid").dataSource.data();

        return data.indexOf(dataItem);
    }

</script>