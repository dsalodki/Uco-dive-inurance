@model System.String

<div class="clear"></div>
@Html.TextArea("", ViewData.TemplateInfo.FormattedModelValue.ToString(), new { @id = ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty), @class = "text-box multi-line ckeditor" })

<script type="text/javascript">
	// This is a check for the CKEditor class. If not defined, the paths must be checked.
	if ( typeof CKEDITOR == 'undefined' )
	{
		document.write(
			'<strong><span style="color: #ff0000">Error</span>: CKEditor not found</strong>.' +
			'This sample assumes that CKEditor (not included with CKFinder) is installed in' +
			'the "/ckeditor/" path. If you have it installed in a different place, just edit' +
			'this file, changing the wrong paths in the &lt;head&gt; (line 5) and the "BasePath"' +
			'value (line 32).' ) ;
	}
	else
    {
        CKEDITOR.config.allowedContent = true;
        CKEDITOR.config.protectedSource = [/\r|\n/g];
	    var editor = CKEDITOR.replace( "@ViewData.TemplateInfo.GetFullHtmlFieldName(string.Empty)",
            {
                language: '@SF.GetLangCodeThreading()',
                allowedContent: true
            }
    );


		// Just call CKFinder.setupCKEditor and pass the CKEditor instance as the first argument.
		// The second parameter (optional), is the path for the CKFinder installation (default = "/ckfinder/").
		CKFinder.setupCKEditor( editor, '@Url.Content("~/Scripts/ckfinder/")' ) ;

		// It is also possible to pass an object with selected CKFinder properties as a second argument.
		// CKFinder.setupCKEditor( editor, { basePath : '../', skin : 'v1' } ) ;
	}
</script>